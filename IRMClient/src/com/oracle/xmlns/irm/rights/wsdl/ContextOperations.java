
package com.oracle.xmlns.irm.rights.wsdl;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import com.oracle.xmlns.irm.classifications.ItemCode;
import com.oracle.xmlns.irm.core.AccountRef;
import com.oracle.xmlns.irm.core.Label;
import com.oracle.xmlns.irm.core.PageRange;
import com.oracle.xmlns.irm.core.TimeRange;
import com.oracle.xmlns.irm.rights.ContextInstance;
import com.oracle.xmlns.irm.rights.ContextInstanceRef;
import com.oracle.xmlns.irm.rights.ContextInstanceVisibility;
import com.oracle.xmlns.irm.rights.ContextJournalEntry;
import com.oracle.xmlns.irm.rights.ContextJournalSorting;
import com.oracle.xmlns.irm.rights.ContextTemplateRef;
import com.oracle.xmlns.irm.rights.DomainRef;


/**
 * 
 *             Context related operations. The context related operations cover the tasks that a context manager would typically perform on a Context Instance. This includes altering Context Instance names and descriptions, specifying the set of Context Instance managers and setting Context Instance level Item Code exclusions. Journal operations are also included. The content journal contains a log of all activity performed on Context sealed content. This includes actions performed while off-line as well as on-line. It includes actions performed on the desktop as well as actions perform on the server. The journal is filled automatically when users perform actions on content, e.g. when content is opened or printed. Failed actions are also added to the journal.
 *         
 * 
 * This class was generated by the JAX-WS RI.
 * Oracle JAX-WS 2.1.5
 * Generated source version: 2.1
 * 
 */
@WebService(name = "ContextOperations", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl")
@XmlSeeAlso({
    com.oracle.xmlns.irm.classifications.ObjectFactory.class,
    com.oracle.xmlns.irm.content.ObjectFactory.class,
    com.oracle.xmlns.irm.core.ObjectFactory.class,
    com.oracle.xmlns.irm.rights.ObjectFactory.class,
    com.oracle.xmlns.irm.rights.wsdl.ObjectFactory.class,
    com.oracle.xmlns.irm.system.ObjectFactory.class
})
public interface ContextOperations {


    /**
     * 
     *                 Create a context. A context is created from a template. The template defines the structure of the context and what roles are available to assign to accounts. Only active templates can be provided when creating contexts. Changes to the template (post context creation) dynamically affect the context. e.g. adding a role to the template makes the role available to the context. When a context is created a Key Set is also generated and associated with the context.
     *             
     * 
     * @param template
     * @param managers
     * @param visibility
     * @param labels
     * @param uuid
     * @return
     *     returns com.oracle.xmlns.irm.rights.ContextInstance
     * @throws UnsupportedCryptoSchemaFault
     * @throws AuthorizationDeniedFault
     * @throws InactiveContextTemplateFault
     * @throws UnknownContextTemplateFault
     * @throws ContextInstanceAlreadyExistsFault
     */
    @WebMethod(operationName = "CreateContextFromTemplate", action = "urn:ContextOperations#CreateContextFromTemplate")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "CreateContextFromTemplate", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.CreateContextFromTemplate")
    @ResponseWrapper(localName = "CreateContextFromTemplateResponse", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.CreateContextFromTemplateResponse")
    public ContextInstance createContextFromTemplate(
        @WebParam(name = "uuid", targetNamespace = "")
        String uuid,
        @WebParam(name = "template", targetNamespace = "")
        ContextTemplateRef template,
        @WebParam(name = "labels", targetNamespace = "")
        List<Label> labels,
        @WebParam(name = "visibility", targetNamespace = "")
        ContextInstanceVisibility visibility,
        @WebParam(name = "managers", targetNamespace = "")
        List<AccountRef> managers)
        throws AuthorizationDeniedFault, ContextInstanceAlreadyExistsFault, InactiveContextTemplateFault, UnknownContextTemplateFault, UnsupportedCryptoSchemaFault
    ;

    /**
     * 
     *                 Save changes to a context. Save changes to a Context Instance by providing two copies. Changes are made by comparing the two copies of the context. If there are no differences in a property then no changes are made to persistent storage for that property. Changes in collection based properties cause additions or removals to occur in persistent storage. For example, if the delta contains a new Label as compared to the context then a new label will be added.
     *             
     * 
     * @param delta
     * @param context
     * @return
     *     returns com.oracle.xmlns.irm.rights.ContextInstance
     * @throws AuthorizationDeniedFault
     * @throws UnknownContextFault
     */
    @WebMethod(operationName = "SaveChangesToContext", action = "urn:ContextOperations#SaveChangesToContext")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "SaveChangesToContext", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.SaveChangesToContext")
    @ResponseWrapper(localName = "SaveChangesToContextResponse", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.SaveChangesToContextResponse")
    public ContextInstance saveChangesToContext(
        @WebParam(name = "context", targetNamespace = "")
        ContextInstance context,
        @WebParam(name = "delta", targetNamespace = "")
        ContextInstance delta)
        throws AuthorizationDeniedFault, UnknownContextFault
    ;

    /**
     * 
     *                 Delete a context. Delete a Context Instance and associated cryptography keys. WARNING - deleting a Context Instance also deletes the content related cryptography keys, making content sealed against this Context permanently inaccessible. Deleting a context also deletes any related journal entries.
     *             
     * 
     * @param context
     * @throws CannotRemoveContextInstanceFault
     * @throws AuthorizationDeniedFault
     */
    @WebMethod(operationName = "DeleteContext", action = "urn:ContextOperations#DeleteContext")
    @RequestWrapper(localName = "DeleteContext", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.DeleteContext")
    @ResponseWrapper(localName = "DeleteContextResponse", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.DeleteContextResponse")
    public void deleteContext(
        @WebParam(name = "context", targetNamespace = "")
        ContextInstanceRef context)
        throws AuthorizationDeniedFault, CannotRemoveContextInstanceFault
    ;

    /**
     * 
     *                 List contexts that the authenticated principal is authorized to access. A context can be accessed by any of it's context managers. Any inspector for the related domain (a context is related to a domain via it's context template) will be able to access the context as long as the context is visible to inspectors. Contexts are visible to inspectors by setting the Visibility property to the Domain.
     *             
     * 
     * @param pageRange
     * @return
     *     returns java.util.List<com.oracle.xmlns.irm.rights.ContextInstance>
     * @throws AuthorizationDeniedFault
     */
    @WebMethod(operationName = "ListContexts", action = "urn:ContextOperations#ListContexts")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ListContexts", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.ListContexts")
    @ResponseWrapper(localName = "ListContextsResponse", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.ListContextsResponse")
    public List<ContextInstance> listContexts(
        @WebParam(name = "pageRange", targetNamespace = "")
        PageRange pageRange)
        throws AuthorizationDeniedFault
    ;

    /**
     * 
     *                 List context managers. Context managers are individuals who manage the rights associated with content sealed using this Context Instance classification. A context manager can also specify the context names and descriptions using Save Changes To Context. A context manager can also specify the context level item exclusions using the same Save Changes To Context method.
     *             
     * 
     * @param context
     * @return
     *     returns java.util.List<com.oracle.xmlns.irm.core.AccountRef>
     * @throws AuthorizationDeniedFault
     * @throws UnknownContextFault
     */
    @WebMethod(operationName = "ListContextManagers", action = "urn:ContextOperations#ListContextManagers")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ListContextManagers", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.ListContextManagers")
    @ResponseWrapper(localName = "ListContextManagersResponse", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.ListContextManagersResponse")
    public List<AccountRef> listContextManagers(
        @WebParam(name = "context", targetNamespace = "")
        ContextInstanceRef context)
        throws AuthorizationDeniedFault, UnknownContextFault
    ;

    /**
     * 
     *                 Add one or managers to a context. A Context Instance will always have at least one manager. When a Context Instance has multiple managers, each manager will have equal permissions to perform Context Instance related activities.
     *             
     * 
     * @param accounts
     * @param context
     * @throws AuthorizationDeniedFault
     * @throws UnknownContextFault
     * @throws AccountAlreadyManagerFault
     */
    @WebMethod(operationName = "AddContextManagers", action = "urn:ContextOperations#AddContextManagers")
    @RequestWrapper(localName = "AddContextManagers", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.AddContextManagers")
    @ResponseWrapper(localName = "AddContextManagersResponse", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.AddContextManagersResponse")
    public void addContextManagers(
        @WebParam(name = "context", targetNamespace = "")
        ContextInstanceRef context,
        @WebParam(name = "accounts", targetNamespace = "")
        List<AccountRef> accounts)
        throws AccountAlreadyManagerFault, AuthorizationDeniedFault, UnknownContextFault
    ;

    /**
     * 
     *                 Remove one or managers from a context. A Context Instance must have at least one manager.
     *             
     * 
     * @param accounts
     * @param context
     * @throws AuthorizationDeniedFault
     * @throws UnknownContextFault
     * @throws CannotRemoveManagersFault
     */
    @WebMethod(operationName = "RemoveContextManagers", action = "urn:ContextOperations#RemoveContextManagers")
    @RequestWrapper(localName = "RemoveContextManagers", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.RemoveContextManagers")
    @ResponseWrapper(localName = "RemoveContextManagersResponse", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.RemoveContextManagersResponse")
    public void removeContextManagers(
        @WebParam(name = "context", targetNamespace = "")
        ContextInstanceRef context,
        @WebParam(name = "accounts", targetNamespace = "")
        List<AccountRef> accounts)
        throws AuthorizationDeniedFault, CannotRemoveManagersFault, UnknownContextFault
    ;

    /**
     * 
     *                 List inspectors. List the inspectors for a domain, previously made inspectors using Add Inspectors. Inspectors are individuals who can examine which accounts have document related rights within a Context Instance.
     *             
     * 
     * @param domain
     * @return
     *     returns java.util.List<com.oracle.xmlns.irm.core.AccountRef>
     * @throws UnknownDomainFault
     * @throws AuthorizationDeniedFault
     */
    @WebMethod(operationName = "ListInspectors", action = "urn:ContextOperations#ListInspectors")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ListInspectors", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.ListInspectors")
    @ResponseWrapper(localName = "ListInspectorsResponse", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.ListInspectorsResponse")
    public List<AccountRef> listInspectors(
        @WebParam(name = "domain", targetNamespace = "")
        DomainRef domain)
        throws AuthorizationDeniedFault, UnknownDomainFault
    ;

    /**
     * 
     *                 Add one or inspectors to a domain. A domain can have zero of more inspectors.
     *             
     * 
     * @param accounts
     * @param domain
     * @throws UnknownDomainFault
     * @throws AccountAlreadyInspectorFault
     * @throws AuthorizationDeniedFault
     */
    @WebMethod(operationName = "AddInspectors", action = "urn:ContextOperations#AddInspectors")
    @RequestWrapper(localName = "AddInspectors", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.AddInspectors")
    @ResponseWrapper(localName = "AddInspectorsResponse", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.AddInspectorsResponse")
    public void addInspectors(
        @WebParam(name = "domain", targetNamespace = "")
        DomainRef domain,
        @WebParam(name = "accounts", targetNamespace = "")
        List<AccountRef> accounts)
        throws AccountAlreadyInspectorFault, AuthorizationDeniedFault, UnknownDomainFault
    ;

    /**
     * 
     *                 Remove one or inspectors from a domain. 
     *             
     * 
     * @param accounts
     * @param domain
     * @throws UnknownDomainFault
     * @throws AuthorizationDeniedFault
     */
    @WebMethod(operationName = "RemoveInspectors", action = "urn:ContextOperations#RemoveInspectors")
    @RequestWrapper(localName = "RemoveInspectors", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.RemoveInspectors")
    @ResponseWrapper(localName = "RemoveInspectorsResponse", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.RemoveInspectorsResponse")
    public void removeInspectors(
        @WebParam(name = "domain", targetNamespace = "")
        DomainRef domain,
        @WebParam(name = "accounts", targetNamespace = "")
        List<AccountRef> accounts)
        throws AuthorizationDeniedFault, UnknownDomainFault
    ;

    /**
     * 
     *                 Search the context journal. Search the context journal entries for activity on content for the specified accounts and/or document items. This search is restricted to the contexts available to the calling principal - i.e. the caller must be a context manager or inspector. If a large number of entries are identified a sub-set of entries in the requested time range will be provided.
     *             
     * 
     * @param pageRange
     * @param timeRange
     * @param items
     * @param sorting
     * @param accountNames
     * @return
     *     returns java.util.List<com.oracle.xmlns.irm.rights.ContextJournalEntry>
     * @throws AuthorizationDeniedFault
     */
    @WebMethod(operationName = "SearchJournal", action = "urn:ContextOperations#SearchJournal")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "SearchJournal", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.SearchJournal")
    @ResponseWrapper(localName = "SearchJournalResponse", targetNamespace = "http://xmlns.oracle.com/irm/rights/wsdl", className = "com.oracle.xmlns.irm.rights.wsdl.SearchJournalResponse")
    public List<ContextJournalEntry> searchJournal(
        @WebParam(name = "accountNames", targetNamespace = "")
        List<String> accountNames,
        @WebParam(name = "items", targetNamespace = "")
        List<ItemCode> items,
        @WebParam(name = "timeRange", targetNamespace = "")
        TimeRange timeRange,
        @WebParam(name = "pageRange", targetNamespace = "")
        PageRange pageRange,
        @WebParam(name = "sorting", targetNamespace = "")
        ContextJournalSorting sorting)
        throws AuthorizationDeniedFault
    ;

}
