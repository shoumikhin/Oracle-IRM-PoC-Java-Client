package com.oracle.xmlns.irm.rights.wsdl;

import com.oracle.xmlns.irm.core.PageRange;

import com.oracle.xmlns.irm.rights.ContextInstance;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.xml.ws.BindingProvider;

import weblogic.wsee.security.saml.SAMLTrustCredentialProvider;

import weblogic.xml.crypto.wss.WSSecurityContext;
import weblogic.xml.crypto.wss.provider.CredentialProvider;
// This source file is generated by Oracle tools.
// Contents may be subject to change.
// For reporting problems, use the following:
// Generated by Oracle JDeveloper 11g Release 2 11.1.2.0.0.6017

public class ContextOperationsClient
{
  public static void main(String [] args)
  {
      ContextOperationsService contextOperationsService = new ContextOperationsService();
      ContextOperations contextOperations = contextOperationsService.getContextOperations();
    
      Map<String, Object> requestContext = ((BindingProvider)contextOperations).getRequestContext();

      try
      {
          setPortCredentialProviderList(requestContext);
     
          PageRange pageRange = new PageRange();

          List<ContextInstance> contexts = contextOperations.listContexts(pageRange);
      }
      catch (AuthorizationDeniedFault e)
      {
          
      } 
      catch (Exception ex)
      {
          ex.printStackTrace();
      }
  }
  
    public static void setPortCredentialProviderList(Map<String, Object> requestContext) throws Exception {
        // TODO - Provide the required credential values
        String username = "admin";
        String password = "password1";
//        String serverKeyStore = "irm.jks";
//        String serverKeyStorePassword = "password1";
//        String serverKeyAlias = "oracle.irm.wrap";
        List<CredentialProvider> credList = new ArrayList<CredentialProvider>();

        // Add the necessary credential providers to the list

        // Code commented out due to empty username/password value found in the credential.
        // credList.add(getUNTCredentialProvider(username, password));

        // Code commented out due to empty server keystore value found in the credential.
        // credList.add(getBSTCredentialProvider(clientKeyStore, clientKeyStorePassword, clientKeyAlias, clientKeyPassword, serverKeyStore, serverKeyStorePassword, serverKeyAlias, requestContext));

        credList.add(getSAMLTrustCredentialProvider());

        requestContext.put(WSSecurityContext.CREDENTIAL_PROVIDER_LIST, credList);
    }
    
    public static CredentialProvider getSAMLTrustCredentialProvider() {
        return new SAMLTrustCredentialProvider();
    }
}
