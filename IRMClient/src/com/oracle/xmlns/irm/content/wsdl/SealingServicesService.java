
package com.oracle.xmlns.irm.content.wsdl;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * 
 *             Sealing, unsealing, resealing and peeking services for content. Sealing is the process of taking unprotected content, encrypting it and adding in meta data called a classification. Unsealing is the term used when sealed content is decrypted. Resealing is the term used when altering the sealed content meta data or classification. Peeking is the term given to the process of extracting meta data from sealed content without decrypting the content. The methods on the sealing services are designed to used remotely, where the content is sent to a server, processes and the results returned to the client. The sealing services support the MTOM (Message Transmission Optimization Mechanism) feature. This allows the services to transfer the binary sealed and unsealed content in the most optimal form available. When sending content to using the sealing services it is recommended to enable MTOM in the client web service stack.
 *         
 * 
 * This class was generated by the JAX-WS RI.
 * Oracle JAX-WS 2.1.5
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "SealingServicesService", targetNamespace = "http://xmlns.oracle.com/irm/content/wsdl", wsdlLocation = "http://ium-vbox-win2k8:16100/irm_sealing/sealing_services?wsdl#%7Bhttp%3A%2F%2Fxmlns.oracle.com%2Firm%2Fcontent%2Fwsdl%7DSealingServicesService")
public class SealingServicesService
    extends Service
{

    private final static URL SEALINGSERVICESSERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(com.oracle.xmlns.irm.content.wsdl.SealingServicesService.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = com.oracle.xmlns.irm.content.wsdl.SealingServicesService.class.getResource(".");
            url = new URL(baseUrl, "http://ium-vbox-win2k8:16100/irm_sealing/sealing_services?wsdl#%7Bhttp%3A%2F%2Fxmlns.oracle.com%2Firm%2Fcontent%2Fwsdl%7DSealingServicesService");
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'http://ium-vbox-win2k8:16100/irm_sealing/sealing_services?wsdl#%7Bhttp%3A%2F%2Fxmlns.oracle.com%2Firm%2Fcontent%2Fwsdl%7DSealingServicesService', retrying as a local file");
            logger.warning(e.getMessage());
        }
        SEALINGSERVICESSERVICE_WSDL_LOCATION = url;
    }

    public SealingServicesService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SealingServicesService() {
        super(SEALINGSERVICESSERVICE_WSDL_LOCATION, new QName("http://xmlns.oracle.com/irm/content/wsdl", "SealingServicesService"));
    }

    /**
     * 
     * @return
     *     returns SealingServices
     */
    @WebEndpoint(name = "SealingServices")
    public SealingServices getSealingServices() {
        return super.getPort(new QName("http://xmlns.oracle.com/irm/content/wsdl", "SealingServices"), SealingServices.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SealingServices
     */
    @WebEndpoint(name = "SealingServices")
    public SealingServices getSealingServices(WebServiceFeature... features) {
        return super.getPort(new QName("http://xmlns.oracle.com/irm/content/wsdl", "SealingServices"), SealingServices.class, features);
    }

}
